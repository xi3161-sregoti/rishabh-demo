apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jaeger
  namespace: {{ .Values.namespace }}
  labels:
    app: jaeger
spec:
  selector:
    matchLabels:
      app: jaeger
  serviceName: jaeger
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      {{ if .Values.volume.storageClassName}}
      storageClassName: {{ .Values.volume.storageClassName }}
      {{ end }}    
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.volume.storage }}
  template:
    metadata:
      labels:
        app: jaeger
      annotations:
        sidecar.istio.io/inject: "false"
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      containers:
        - name: jaeger
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          env:
            - name: BADGER_EPHEMERAL
              value: "false"
            - name: SPAN_STORAGE_TYPE
              value: "badger"
            - name: BADGER_DIRECTORY_VALUE
              value: "/badger/data"
            - name: BADGER_DIRECTORY_KEY
              value: "/badger/key"
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: MEMORY_MAX_TRACES
              value: {{ .Values.deployment.memoryMaxTrace | quote}}
            - name: QUERY_BASE_PATH
              value: /jaeger
          livenessProbe:
            httpGet:
              path: /
              port: 14269
          readinessProbe:
            httpGet:
              path: /
              port: 14269
          volumeMounts:
            - name: data
              mountPath: /badger/data
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
