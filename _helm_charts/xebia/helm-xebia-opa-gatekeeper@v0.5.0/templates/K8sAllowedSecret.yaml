apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedsecret
  annotations:
    description: Access allowed Secret
    category: Security

spec:
  crd:
    spec:
      names:
        kind: K8sAllowedSecret
      validation:
        openAPIV3Schema:
          type: object
          properties:
            allowedSecrets:
              type: array
              items:
                type: string
            skipContainers:
              type: array
              items:
                type: string
            
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedsecret
        import future.keywords.in

        # Check if containers are using allowed secrets
        violation[{"msg": msg}] {
          container := filtered_containers[_] 
          validate(container)
          msg := sprintf("Container %v in %v %v is not accessing the vaild secrets", [container.name, input.review.object.kind, input.review.object.metadata.name])
        }

        # Check if volume are using allowed secrets
        violation[{"msg": msg}] {
          volume := select_volume[_]
          validate_volume(volume)
          msg := sprintf("%v %v volume %v is not accessing the vaild secrets", [input.review.object.kind, input.review.object.metadata.name,volume.name])
        }

        validate(ctr) = true {
          invaild := [val | env = ctr.env[_]; val = check_secrets(env)]
          any(invaild)
        }

        validate(ctr) = true {
          invaild := [val | envf = ctr.envFrom[_]; val = check_secrets(envf)]
          any(invaild)
        }

        check_secrets(env) = true {
          not env.valueFrom.secretKeyRef.name in input.parameters.allowedSecrets
        }

        validate_volume(vlm) = true {
          input.parameters.allowedSecrets[vlm.secret.secretName]
        }

        # filtered_containers returns containers and initContainers
        filtered_containers[c] {
          input.review.object.kind == "Pod"
          c := input.review.object.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "Pod"
          c := input.review.object.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind in ["Deployment", "StatefulSet", "Job"]
          c := input.review.object.spec.template.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind in ["Deployment", "StatefulSet", "Job"]
          c := input.review.object.spec.template.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "CronJob"
          c := input.review.object.spec.jobTemplate.spec.template.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "CronJob"
          c := input.review.object.spec.jobTemplate.spec.template.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }
       
        check_for_allowedContainers(ctr) = true {
          satisfied := [val | repo = input.parameters.skipContainers[_] ; val = ctr.name == repo]
          not any(satisfied)
        }

        select_volume[v]{
          input.review.object.kind == "Pod"
          v := input.review.object.spec.volumes[_]
        }

        select_volume[v]{
          input.review.object.kind in ["Deployment", "StatefulSet", "Job"]
          v := input.review.object.spec.template.spec.volumes[_]
        }

        select_volume[v]{
          input.review.object.kind == "CronJob"
          v := input.review.object.spec.jobTemplate.spec.template.spec.volumes[_]
        }

        