apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spoddistributionbudget
  annotations:
    description: Alotted Pod Distribution Budget
    category: Resilience
spec:
  crd:
    spec:
      names:
        kind: K8sPodDistributionBudget
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spoddistributionbudget
        import future.keywords.in

        violation[{"msg": msg}] {
          not anymatch
          msg := "Does found any Pod Disruption Budget in cluster"
        }

        violation[{"msg": msg}] {
          input.review.object.kind in ["Deployment", "StatefulSet"]
          not input.review.object.spec.selector.matchLabels.app
          pdbs:= data.inventory.namespace[input.review.object.metadata.namespace][otherapiversion]["PodDisruptionBudget"]
          msg := sprintf("%v %v does not have any labels assigned (PDB requires labels)", [input.review.object.kind, input.review.object.metadata.name])
        }
       
        violation[{"msg": msg}] {
          input.review.object.kind in ["Deployment", "StatefulSet"]
          pdbs:= data.inventory.namespace[input.review.object.metadata.namespace][otherapiversion]["PodDisruptionBudget"]
          not validate(pdbs)
          msg := sprintf("%v %v does not have Pod Disruption Budget assigned, labels.app: %v", [input.review.object.kind, input.review.object.metadata.name, input.review.object.spec.selector.matchLabels.app])
        }

        anymatch = true{
          pdbs := data.inventory.namespace[input.review.object.metadata.namespace][otherapiversion]["PodDisruptionBudget"]
        }

        validate(pdbs){
          satisfied = [good | pdb = pdbs[_]; good = checkPDB(pdb)]
          any(satisfied)
        }

        checkPDB(pdb) = true {
          pdb.metadata.namespace == input.review.object.metadata.namespace
          pdb.spec.selector.matchLabels.app == input.review.object.spec.selector.matchLabels.app
        }
