apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8swindowsalloweduseridgroupid
  annotations:
    description: Windows container should run on allowed userID or groupID
    category: Security
    
spec:
  crd:
    spec:
      names:
        kind: K8sWindowsAllowedUserIDGroupID
      validation:
        openAPIV3Schema:
          type: object
          properties:
            userID:
              type: array
              items:
                type: string
            groupID:
              type: array
              items:
                type: string
            skipContainers:
              type: array
              items:
                type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8swindowsalloweduseridgroupid
        import future.keywords.in

        # Check UserName
        violation[{"msg": msg}] {
          container := filtered_containers[_]  
          validate_userID(container)
          msg = sprintf("Container %v in your %v %v is running with disallowed user ID %v", [container.name, input.review.object.kind, input.review.object.metadata.name, container.securityContext.windowsOptions.runAsUserName])
        }

        # Check GroupID
        violation[{"msg": msg}] {
          container := filtered_containers[_]  
          validate_groupID(container)
          msg = sprintf("Container %v in your %v %v is running with disallowed group ID %v", [container.name, input.review.object.kind, input.review.object.metadata.name, container.securityContext.windowsOptions.runAsUserGroup])
        }

        validate_userID(ctr){
          ctr.platform == "windows"
          not input.parameters.userID[ctr.securityContext.windowsOptions.runAsUserName]
        }

        validate_groupID(ctr){
          ctr.platform == "windows"
          not input.parameters.userID[ctr.securityContext.windowsOptions.runAsUserGroup]
        }
        
        # filtered_containers returns containers and initContainers
        filtered_containers[c] {
          input.review.object.kind == "Pod"
          c := input.review.object.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "Pod"
          c := input.review.object.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind in ["Deployment", "StatefulSet", "Job"]
          c := input.review.object.spec.template.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind in ["Deployment", "StatefulSet", "Job"]
          c := input.review.object.spec.template.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "CronJob"
          c := input.review.object.spec.jobTemplate.spec.template.spec.containers[_]
          check_for_allowedContainers(c) 
        }

        filtered_containers[c] {
          input.review.object.kind == "CronJob"
          c := input.review.object.spec.jobTemplate.spec.template.spec.initContainers[_]
          check_for_allowedContainers(c) 
        }
       
        check_for_allowedContainers(ctr) = true {
          satisfied := [good | repo = input.parameters.skipContainers[_] ; good = ctr.name == repo]
          not any(satisfied)
        }